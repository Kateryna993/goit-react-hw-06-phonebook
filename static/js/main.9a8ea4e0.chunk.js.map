{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","redux/actions/contacts.js","components/ContactForm/Form.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/reducers/contacts.js","redux/store/store.js","index.js","components/ContactForm/Form.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","actions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","ContactForm","useState","setName","setNumber","dispatch","useDispatch","nameInputId","phoneInputId","handleChange","event","target","value","reset","onSubmit","e","preventDefault","className","styles","formLabel","htmlFor","type","pattern","title","required","formInput","onChange","addContactBtn","addUserIcon","ContactList","contactsList","useSelector","contacts","filter","normalizedFilter","toLowerCase","contact","includes","handleFilteredContacts","items","contactList","map","contactItem","contactName","deleteBtn","onClick","deleteContacts","deleteIcon","Filter","state","filterContainer","findContactTitle","findContactIcon","filterInput","PhoneBookApp","phonebookWrapper","mainTitle","contactsTitle","createReducer","initialContactsState","find","alert","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","setStorage","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9a8ea4e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__EKLiN\",\"findContactTitle\":\"Filter_findContactTitle__2PYIP\",\"findContactIcon\":\"Filter_findContactIcon__6gF0t\",\"filterInput\":\"Filter_filterInput__2U3gq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"App_mainTitle__1mPPv\",\"contactsTitle\":\"App_contactsTitle__Y901u\",\"phonebookWrapper\":\"App_phonebookWrapper__1P3Gi\"};","// import types from '../types/contact-types';\nimport { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst addContact = createAction('contacts/Add', (name, number) => {\n  return {\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n    },\n  };\n});\n\nconst deleteContact = createAction('contacts/Delete');\n\nconst changeFilter = createAction('contacts/Filter');\n\nconst actions = { addContact, deleteContact, changeFilter };\n\nexport default actions;\n\n/* vanilla redux previous logic */\n\n// const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: { id: shortid.generate(), name, number },\n// });\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.FILTER,\n//   payload: value,\n// });\n","import { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport styles from './Form.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions/contacts';\r\n// import { BsPersonPlusFill } from 'react-icons';\r\nimport { BsPersonPlusFill } from 'react-icons/bs';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = shortid.generate();\r\n  const phoneInputId = shortid.generate();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(actions.addContact(name, number));\r\n    // onSubmit(name, number);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.ContactForm}>\r\n      <label className={styles.formLabel} htmlFor={nameInputId}>\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        className={styles.formInput}\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label className={styles.formLabel} htmlFor={phoneInputId}>\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        className={styles.formInput}\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={phoneInputId}\r\n      />\r\n      <button className={styles.addContactBtn} type=\"submit\">\r\n        <BsPersonPlusFill className={styles.addUserIcon} />\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { /* connect, */ useSelector, useDispatch } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport actions from '../../redux/actions/contacts';\r\nimport { AiOutlineUserDelete } from 'react-icons/ai';\r\n\r\nconst handleFilteredContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nexport default function ContactList() {\r\n  const contactsList = useSelector(({ contacts: { items, filter } }) =>\r\n    handleFilteredContacts(items, filter),\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const deleteContacts = id => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={styles.contactList}>\r\n      {contactsList.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.contactItem}>\r\n          <p className={styles.contactName}>\r\n            {name}: &nbsp;{number}\r\n          </p>\r\n          <button\r\n            className={styles.deleteBtn}\r\n            type=\"button\"\r\n            onClick={() => deleteContacts(id)}\r\n          >\r\n            <AiOutlineUserDelete className={styles.deleteIcon} />\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string,\r\n//       name: PropTypes.string,\r\n//       number: PropTypes.string,\r\n//     }),\r\n//   ),\r\n//   deleteContacts: PropTypes.func,\r\n// };\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contactsList: handleFilteredContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   deleteContacts: id => dispatch(actions.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { /* connect, */ useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions/contacts';\r\n\r\nimport { FcSearch } from 'react-icons/fc';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className={styles.filterContainer}>\r\n      <h3 className={styles.findContactTitle}>\r\n        Find contacts by name <FcSearch className={styles.findContactIcon} />\r\n      </h3>\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={event => dispatch(actions.changeFilter(event.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string,\r\n//   onChange: PropTypes.func,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { useState } from 'react';\nimport ContactForm from './components/ContactForm/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\n// import contactsList from './data/contacts.json';\n// import useLocalStorage from './hooks/LocalStorage.jsx';\n// import shortid from 'shortid';\nimport styles from './App.module.css';\n\nexport default function PhoneBookApp() {\n  return (\n    <div className={styles.phonebookWrapper}>\n      <h1 className={styles.mainTitle}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={styles.contactsTitle}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport actions from '../actions/contacts';\nimport initialContactsState from '../../data/contacts.json';\n// import types from '../types/contact-types';\n// const initialContactsState = [];\n\nconst items = createReducer(initialContactsState, {\n  [actions.addContact]: (state, { payload }) => {\n    if (\n      state.find(\n        ({ name, number }) =>\n          name === payload.name || number === number.payload,\n      )\n    ) {\n      alert(`${payload.name} is already in contacts`);\n      return [...state];\n    }\n    return [...state, payload];\n  },\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst initialFilterState = '';\n\nconst filter = createReducer(initialFilterState, {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n\n/* vanilla redux logic */\n// const items = (state = initialContactsState, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       if (\n//         state.find(\n//           ({ name, number }) =>\n//             name === payload.name || number === number.payload,\n//         )\n//       ) {\n//         alert(`${payload.name} is already in contacts`);\n//         return [...state];\n//       }\n//       return [...state, payload];\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = initialFilterState, { type, payload }) => {\n//   switch (type) {\n//     case types.FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from '../reducers/contacts';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nconst setStorage = { store, persistor };\n\nexport default setStorage;\n\n/* vanilla redux logic */\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, devToolsEnhancer());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <PersistGate loading={null} persistor={store.persistor}>\n    <Provider store={store.store}>\n      <App />\n    </Provider>\n  </PersistGate>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"Form_ContactForm__S11aZ\",\"formLabel\":\"Form_formLabel__2tMTx\",\"formInput\":\"Form_formInput__1z5fV\",\"addContactBtn\":\"Form_addContactBtn__SoD9j\",\"addUserIcon\":\"Form_addUserIcon__dWB3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__36Eur\",\"contactItem\":\"ContactList_contactItem__2XYjA\",\"deleteBtn\":\"ContactList_deleteBtn__3WzbO\",\"deleteIcon\":\"ContactList_deleteIcon__1Bi-V\"};"],"sourceRoot":""}